{"version":3,"sources":["assets/sound.mp3","providers/mainTimer/mainTimerProvider.tsx","providers/timer/timerProvider.tsx","components/TimeDisplay/TimeDisplay.tsx","components/ButtonsContainer/ButtonsContainer.tsx","components/Timer/Timer.tsx","components/MainTimer/MainTimer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainTimerContext","createContext","mainSeconds","mainMinutes","isActive","mainTimerStart","mainTimerStop","setMainTimer","MainTimerProvider","children","series","useState","seconds","setSeconds","minutes","setMinutes","setIsActive","id","setId","useCallback","secondsInWholeTraining","initialMinutes","Math","floor","useEffect","clearInterval","Provider","value","intervalId","setInterval","soundSfx","require","TimerContext","isBrake","handleTimerStart","handleTimerStop","handleTimerReset","TimerProvider","setIsBrake","useSound","volume","play","useContext","stopTimer","handleTimerSetToBrake","TimeDisplay","renderClockPart","className","ButtonsContainer","Button","variant","color","onClick","Timer","MainTimer","App","setSeries","type","placeholder","onChange","e","Number","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f825e16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound.c5a8dcbd.mp3\";","import React, {createContext, ReactElement, useCallback, useEffect, useState,} from \"react\";\n\nexport const MainTimerContext = createContext({\n  mainSeconds: 0,\n  mainMinutes: 0,\n  isActive: false,\n  mainTimerStart: () => {},\n  mainTimerStop: () => {},\n  setMainTimer: () => {},\n});\n\ninterface IProps {\n  children: ReactElement;\n  series: number;\n}\n\nconst MainTimerProvider: React.FC<IProps> = ({ children, series }) => {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [id, setId] = useState();\n\n  const setMainTimer = useCallback(() => {\n    const secondsInWholeTraining = series * 130;\n    const initialMinutes = Math.floor(secondsInWholeTraining / 60);\n    const initialSeconds = secondsInWholeTraining - initialMinutes * 60;\n    setSeconds(initialSeconds);\n    setMinutes(initialMinutes);\n  }, [series]);\n\n  useEffect(() => {\n    setMainTimer();\n  }, [setMainTimer, series]);\n\n  const mainTimerStart = () => {\n    setIsActive(true);\n    const intervalId = setInterval(() => {\n      setSeconds((seconds) => seconds - 1);\n    }, 1000);\n    setId(intervalId);\n  };\n\n  const mainTimerStop = useCallback(() => {\n    setIsActive(false);\n    clearInterval(id);\n  }, [id]);\n\n  useEffect(() => {\n    if (isActive && seconds === -1 && minutes > 0) {\n      setMinutes((minutes) => minutes - 1);\n      setSeconds(59);\n    }\n    if (isActive && seconds === 0 && minutes === 0) {\n      mainTimerStop();\n      setMainTimer();\n    }\n  }, [setMainTimer, mainTimerStop, seconds, isActive, minutes]);\n\n  return (\n    <MainTimerContext.Provider\n      value={{\n        mainSeconds: seconds,\n        mainMinutes: minutes,\n        isActive,\n        mainTimerStart,\n        mainTimerStop,\n        setMainTimer,\n      }}\n    >\n      {children}\n    </MainTimerContext.Provider>\n  );\n};\n\nexport default MainTimerProvider;\n","import React, {\n  createContext,\n  ReactElement,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport useSound from \"use-sound\";\nimport { MainTimerContext } from \"../mainTimer/mainTimerProvider\";\n\nconst soundSfx = require(\"../../assets/sound.mp3\");\n\nexport const TimerContext = createContext({\n  seconds: 10,\n  minutes: 0,\n  isActive: false,\n  isBrake: true,\n  handleTimerStart: () => {},\n  handleTimerStop: () => {},\n  handleTimerReset: () => {},\n});\n\ninterface IProps {\n  children: ReactElement;\n}\n\nconst TimerProvider: React.FC<IProps> = ({ children }) => {\n  const [seconds, setSeconds] = useState(10);\n  const [minutes, setMinutes] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isBrake, setIsBrake] = useState(true);\n  const [id, setId] = useState();\n\n  const [play] = useSound(soundSfx, { volume: 1 });\n\n  const { mainSeconds, mainMinutes } = useContext(MainTimerContext);\n\n  const startTimer = () => {\n    setIsActive(true);\n    const intervalId = setInterval(() => {\n      setSeconds((seconds) => seconds - 1);\n    }, 1000);\n    setId(intervalId);\n  };\n\n  const stopTimer = useCallback((): void => {\n    setIsActive(false);\n    clearInterval(id);\n  }, [id]);\n\n  const handleTimerReset = useCallback((): void => {\n    setIsBrake(false);\n    setSeconds(0);\n    setMinutes(2);\n  }, []);\n\n  const handleTimerSetToBrake = (): void => {\n    setSeconds(10);\n    setMinutes(0);\n    setIsBrake(true);\n  };\n\n  useEffect(() => {\n    if (mainSeconds === 0 && mainMinutes === 0) {\n      stopTimer();\n      handleTimerSetToBrake();\n    }\n    if (isActive && seconds === -1 && minutes > 0) {\n      setMinutes((minutes) => minutes - 1);\n      setSeconds(59);\n    }\n    if (isActive && !isBrake && seconds === -1 && minutes === 0) {\n      handleTimerSetToBrake();\n      play();\n    }\n    if (isBrake && seconds === 0) {\n      handleTimerReset();\n    }\n  }, [\n    handleTimerReset,\n    stopTimer,\n    play,\n    seconds,\n    isActive,\n    minutes,\n    isBrake,\n    mainSeconds,\n    mainMinutes,\n  ]);\n\n  return (\n    <TimerContext.Provider\n      value={{\n        seconds,\n        minutes,\n        isActive,\n        isBrake,\n        handleTimerStart: startTimer,\n        handleTimerStop: stopTimer,\n        handleTimerReset,\n      }}\n    >\n      {children}\n    </TimerContext.Provider>\n  );\n};\n\nexport default TimerProvider;\n","import React, {useContext} from \"react\";\nimport './TimeDisplay.scss'\nimport {TimerContext} from \"../../providers/timer/timerProvider\";\n\ninterface IProps {\n  seconds: number;\n  minutes: number;\n}\n\nconst TimeDisplay: React.FC<IProps> = ({ seconds, minutes }) => {\n  const { isBrake } = useContext(TimerContext);\n  const renderClockPart = (value: number) =>\n    `${!value ? \"00\" : value < 10 ? `0${value}` : value}`;\n  return (\n    <p className={`clock ${isBrake && 'red'}`}>\n      {renderClockPart(minutes)}:{renderClockPart(seconds)}\n    </p>\n  );\n};\n\nexport default TimeDisplay;\n","import React, { useContext } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { TimerContext } from \"../../providers/timer/timerProvider\";\nimport { MainTimerContext } from \"../../providers/mainTimer/mainTimerProvider\";\n\nconst ButtonsContainer = () => {\n  const {\n    isActive,\n    handleTimerStart,\n    handleTimerStop,\n    handleTimerReset,\n  } = useContext(TimerContext);\n  const { mainTimerStart, mainTimerStop } = useContext(MainTimerContext);\n  const handleStart = () => {\n    handleTimerStart();\n    mainTimerStart();\n  };\n  const handleStop = () => {\n    mainTimerStop();\n    handleTimerStop();\n  };\n  const handleReset = () => {\n    handleTimerReset();\n  };\n  return (\n    <div className=\"buttons-container\">\n      {isActive ? (\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleStop}>\n          STOP\n        </Button>\n      ) : (\n        <Button variant=\"contained\" color=\"primary\" onClick={handleStart}>\n          START\n        </Button>\n      )}\n      <Button variant=\"contained\" color=\"default\" onClick={handleReset}>\n        RESET\n      </Button>\n    </div>\n  );\n};\n\nexport default ButtonsContainer;\n","import React, { useContext } from \"react\";\nimport \"./Timer.scss\";\nimport TimeDisplay from \"../TimeDisplay/TimeDisplay\";\nimport ButtonsContainer from \"../ButtonsContainer/ButtonsContainer\";\nimport { TimerContext } from \"../../providers/timer/timerProvider\";\n\nconst Timer: React.FC = () => {\n  const { seconds, minutes } = useContext(TimerContext);\n  return (\n    <div className={\"timer-container\"}>\n      <TimeDisplay seconds={seconds} minutes={minutes} />\n      <ButtonsContainer />\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useContext } from \"react\";\nimport TimeDisplay from \"../TimeDisplay/TimeDisplay\";\nimport { MainTimerContext } from \"../../providers/mainTimer/mainTimerProvider\";\n\nconst MainTimer: React.FC = () => {\n  const { mainSeconds, mainMinutes } = useContext(MainTimerContext);\n  return (\n    <div className={\"timer-container\"}>\n      <TimeDisplay seconds={mainSeconds} minutes={mainMinutes} />\n    </div>\n  );\n};\n\nexport default MainTimer;\n","import React, { useState } from \"react\";\nimport Timer from \"./components/Timer/Timer\";\nimport \"./App.scss\";\nimport MainTimer from \"./components/MainTimer/MainTimer\";\nimport MainTimerProvider from \"./providers/mainTimer/mainTimerProvider\";\nimport TimerProvider from \"./providers/timer/timerProvider\";\n\nconst App = () => {\n  const [series, setSeries] = useState(1);\n  return (\n    <div className=\"app\">\n      <div className=\"timers\">\n        <input\n          type=\"number\"\n          placeholder=\"number of series\"\n          onChange={(e) => setSeries(Number(e.target.value))}\n        />\n        <MainTimerProvider series={series}>\n          <TimerProvider>\n            <>\n              <Timer />\n              <MainTimer />\n            </>\n          </TimerProvider>\n        </MainTimerProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}